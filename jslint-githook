#!/bin/sh +x
# --
# A hook to automatically execute jslint on modified javascript files after every commit.
# --
# To make this hook work, rename this file as "pre-commit" and insert it in you .git/hooks/ folder
# NOTE: if you move the jsl file, you have to update the variable "PathToJslint" below.
# --

# IMPORTANT: the hook will be executed from the root folder of the git working tree
# so the next paths must be relative to that
PathToJslint="./" 
JSLint=$PathToJslint'jsl'

AtLeastOneError=false
modifiedJavascriptFileNames=""
JSFileNames=''
JSFileCounter=''

validationErrorHandler(){
	AtLeastOneError=true
	
}


printSectionLine(){
	echo "# --------------------------------------------------"
}

printSummary(){
	printSectionLine
	echo "#  $1"
	printSectionLine
}

printHeader(){
	echo ""
	printSectionLine
	echo "#       Executing JsLint validation"
	printSectionLine
}

printValidatingFile(){
	echo ""
	echo "# --------------- VALIDATING FILE: $1 --------------------"
	echo ""
}

validateJSLintPath(){
	if ! [ -f $JSLint ]
		then
		printSummary "jslint-hook not working, we can't find JSLint on: $JSLint \n#  please validate the library is there or update the PathToJslint variable."
		exit 0
	fi
}

processModifiedJavascriptFiles(){
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
	if git-rev-parse --verify HEAD >/dev/null 2>&1; then
	    against=HEAD
	fi

	getNamesCommand=`git diff-index --name-only $against | grep \.js$`
	JsFileCounter=0
	for NAME in $getNamesCommand
	do
		JSFileNames[ $JsFileCounter ]=$NAME
		JsFileCounter=$(( $JsFileCounter + 1 ))
	done
}

checkIfJSFilesAreModified(){
	processModifiedJavascriptFiles
	if [ $JsFileCounter = 0 ];
		then
		echo "#  No javascript changes"
		echo "#  Nothing to validate"
		printSectionLine
		echo ""
		exit 0
	fi
}

validateEveryJSFile(){
	trap 'validationErrorHandler' ERR
	for FILE in ${JSFileNames[@]}
	do
		outputFormat="--line:__LINE__: __ERROR__"
		printValidatingFile $FILE
		# echo "$FILE"
		# echo "$JSLintConfFile"
		validationResult=`$JSLint -process $FILE -nologo -nofilelisting -nocontext -output-format "$outputFormat"`
		echo "$validationResult"
		echo ""
		echo ""
	done
}

checkForJSLintErrors(){
	if $AtLeastOneError
		then 
			printSummary "Commit blocked, errors/warnings found on Javascript code, please correct and try again.";
			exit 1
		else
			printSummary "Javascript validation successful, No Erros Found.";
			exit 0
	fi		
}

# Main Process
validateJSLintPath
printHeader
checkIfJSFilesAreModified
validateEveryJSFile
checkForJSLintErrors
